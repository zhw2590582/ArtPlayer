{"mappings":"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","sources":["packages/artplayer-plugin-ambilight/src/index.js","node_modules/@parcel/transformer-js/src/esmodule-helpers.js"],"sourcesContent":["export default function artplayerPluginAmbilight(option = {}) {\n    return (art) => {\n        const { $video } = art.template;\n        const { createElement, addClass, setStyles } = art.constructor.utils;\n        const { blur = '50px', opacity = 0.5, frequency = 10, duration = 0.3 } = option;\n\n        const $ambilight = createElement('div');\n        const gridItems = createGridItems($ambilight);\n\n        setupAmbilight($ambilight, $video);\n        setupGridItems(gridItems, blur, opacity, duration);\n\n        const updateColors = createColorUpdater($video, gridItems, frequency);\n\n        let animationFrameId = null;\n\n        function start() {\n            if (!animationFrameId) {\n                updateColors();\n            }\n        }\n\n        function stop() {\n            if (animationFrameId) {\n                cancelAnimationFrame(animationFrameId);\n                animationFrameId = null;\n            }\n        }\n\n        art.on('ready', start);\n        art.on('destroy', stop);\n\n        return {\n            name: 'artplayerPluginAmbilight',\n            start,\n            stop,\n        };\n\n        function createGridItems($ambilight) {\n            $ambilight.innerHTML = Array(9).fill('<div></div>').join('');\n            return Array.from($ambilight.children);\n        }\n\n        function setupAmbilight($ambilight, $video) {\n            addClass($ambilight, 'artplayer-plugin-ambilight');\n            $video.parentNode.insertBefore($ambilight, $video);\n            setStyles($ambilight, {\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                zIndex: 9,\n                inset: 0,\n                display: 'grid',\n                gridTemplateColumns: '1fr 1fr 1fr',\n                gridTemplateRows: '1fr 1fr 1fr',\n            });\n        }\n\n        function setupGridItems(gridItems, blur, opacity, duration) {\n            gridItems.forEach(($item) => {\n                setStyles($item, {\n                    opacity,\n\n                    filter: `blur(${blur})`,\n                    transition: `background-color ${duration}s ease`,\n                });\n            });\n        }\n\n        function createColorUpdater($video, gridItems, frequency) {\n            const canvas = createElement('canvas');\n            const ctx = canvas.getContext('2d');\n            canvas.width = 3;\n            canvas.height = 3;\n\n            function getAverageColor(x, y, w, h) {\n                ctx.drawImage($video, x, y, w, h, 0, 0, 1, 1);\n                const [r, g, b] = ctx.getImageData(0, 0, 1, 1).data;\n                return `rgb(${r}, ${g}, ${b})`;\n            }\n\n            let lastUpdateTime = 0;\n\n            return function updateColors() {\n                const now = performance.now();\n                if (now - lastUpdateTime < 1000 / frequency || !art.playing) {\n                    animationFrameId = requestAnimationFrame(updateColors);\n                    return;\n                }\n\n                lastUpdateTime = now;\n\n                const w = $video.videoWidth / 3;\n                const h = $video.videoHeight / 3;\n\n                const colors = [\n                    [0, 0],\n                    [w, 0],\n                    [2 * w, 0],\n                    [0, h],\n                    [w, h],\n                    [2 * w, h],\n                    [0, 2 * h],\n                    [w, 2 * h],\n                    [2 * w, 2 * h],\n                ].map(([x, y]) => getAverageColor(x, y, w, h));\n\n                gridItems.forEach(($item, index) => {\n                    $item.style.backgroundColor = colors[index];\n                });\n\n                animationFrameId = requestAnimationFrame(updateColors);\n            };\n        }\n    };\n}\n\nif (typeof window !== 'undefined') {\n    window['artplayerPluginAmbilight'] = artplayerPluginAmbilight;\n}\n","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (\n      key === 'default' ||\n      key === '__esModule' ||\n      Object.prototype.hasOwnProperty.call(dest, key)\n    ) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../../../"}